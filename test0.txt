IncomingMessage {
  _readableState: 
   ReadableState {
     objectMode: false,
     highWaterMark: 16384,
     buffer: BufferList { head: null, tail: null, length: 0 },
     length: 0,
     pipes: null,
     pipesCount: 0,
     flowing: true,
     ended: false,
     endEmitted: false,
     reading: false,
     sync: true,
     needReadable: false,
     emittedReadable: false,
     readableListening: false,
     resumeScheduled: true,
     defaultEncoding: 'utf8',
     ranOut: false,
     awaitDrain: 0,
     readingMore: true,
     decoder: null,
     encoding: null },
  readable: true,
  domain: null,
  _events: { data: { [Function] [length]: 1, [name]: '' } },
  _eventsCount: 1,
  _maxListeners: undefined,
  socket: 
   Socket {
     connecting: false,
     _hadError: false,
     _handle: 
      TCP {
        bytesRead: 242,
        _externalStream: {},
        fd: -1,
        reading: true,
        owner: [Circular],
        onread: 
         { [Function: onread]
           [length]: 2,
           [name]: 'onread',
           [prototype]: onread { [constructor]: [Circular] } },
        onconnection: null,
        writeQueueSize: 0,
        _consumed: true },
     _parent: null,
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        defaultEncoding: 'utf8',
        ranOut: false,
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _events: 
      { end: 
         [ { [Function: g]
             [length]: 0,
             [name]: 'g',
             [prototype]: g { [constructor]: [Circular] },
             listener: 
              { [Function: onend]
                [length]: 0,
                [name]: 'onend',
                [prototype]: onend { [constructor]: [Circular] } } },
           { [Function: socketOnEnd]
             [length]: 0,
             [name]: 'socketOnEnd',
             [prototype]: socketOnEnd { [constructor]: [Circular] } },
           [length]: 2 ],
        finish: 
         { [Function: onSocketFinish]
           [length]: 0,
           [name]: 'onSocketFinish',
           [prototype]: onSocketFinish { [constructor]: [Circular] } },
        _socketEnd: 
         { [Function: onSocketEnd]
           [length]: 0,
           [name]: 'onSocketEnd',
           [prototype]: onSocketEnd { [constructor]: [Circular] } },
        drain: 
         [ { [Function: ondrain]
             [length]: 0,
             [name]: 'ondrain',
             [prototype]: ondrain { [constructor]: [Circular] } },
           { [Function: socketOnDrain]
             [length]: 0,
             [name]: 'socketOnDrain',
             [prototype]: socketOnDrain { [constructor]: [Circular] } },
           [length]: 2 ],
        timeout: 
         { [Function]
           [length]: 0,
           [name]: '',
           [prototype]: { [constructor]: [Circular] } },
        error: 
         { [Function: socketOnError]
           [length]: 1,
           [name]: 'socketOnError',
           [prototype]: socketOnError { [constructor]: [Circular] } },
        close: 
         [ { [Function: serverSocketCloseListener]
             [length]: 0,
             [name]: 'serverSocketCloseListener',
             [prototype]: serverSocketCloseListener { [constructor]: [Circular] } },
           { [Function: onServerResponseClose]
             [length]: 0,
             [name]: 'onServerResponseClose',
             [prototype]: onServerResponseClose { [constructor]: [Circular] } },
           [length]: 2 ],
        data: 
         { [Function: socketOnData]
           [length]: 1,
           [name]: 'socketOnData',
           [prototype]: socketOnData { [constructor]: [Circular] } },
        resume: 
         { [Function: onSocketResume]
           [length]: 0,
           [name]: 'onSocketResume',
           [prototype]: onSocketResume { [constructor]: [Circular] } },
        pause: 
         { [Function: onSocketPause]
           [length]: 0,
           [name]: 'onSocketPause',
           [prototype]: onSocketPause { [constructor]: [Circular] } } },
     _eventsCount: 10,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: 
         { [Function]
           [length]: 1,
           [name]: '',
           [prototype]: { [constructor]: [Circular] } },
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: 
         CorkedRequest {
           next: null,
           entry: null,
           finish: { [Function] [length]: 1, [name]: '' } } },
     writable: true,
     allowHalfOpen: true,
     destroyed: false,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        domain: null,
        _events: 
         { connection: 
            { [Function: connectionListener]
              [length]: 1,
              [name]: 'connectionListener',
              [prototype]: connectionListener { [constructor]: [Circular] } },
           request: { [Function] [length]: 2, [name]: '' } },
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        [connections]: [Getter/Setter],
        _handle: 
         TCP {
           bytesRead: 0,
           _externalStream: {},
           fd: -1,
           reading: false,
           owner: [Circular],
           onread: null,
           onconnection: 
            { [Function: onconnection]
              [length]: 2,
              [name]: 'onconnection',
              [prototype]: onconnection { [constructor]: [Circular] } },
           writeQueueSize: 0 },
        _usingSlaves: false,
        _slaves: [ [length]: 0 ],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        _pendingResponseData: 0,
        _connectionKey: '6::::5000' },
     _server: 
      Server {
        domain: null,
        _events: 
         { connection: 
            { [Function: connectionListener]
              [length]: 1,
              [name]: 'connectionListener',
              [prototype]: connectionListener { [constructor]: [Circular] } },
           request: { [Function] [length]: 2, [name]: '' } },
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        [connections]: [Getter/Setter],
        _handle: 
         TCP {
           bytesRead: 0,
           _externalStream: {},
           fd: -1,
           reading: false,
           owner: [Circular],
           onread: null,
           onconnection: 
            { [Function: onconnection]
              [length]: 2,
              [name]: 'onconnection',
              [prototype]: onconnection { [constructor]: [Circular] } },
           writeQueueSize: 0 },
        _usingSlaves: false,
        _slaves: [ [length]: 0 ],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        _pendingResponseData: 0,
        _connectionKey: '6::::5000' },
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: 
         Timer {
           '0': 
            { [Function: listOnTimeout]
              [length]: 0,
              [name]: 'listOnTimeout',
              [prototype]: listOnTimeout { [constructor]: [Circular] } },
           _list: [Circular] },
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: 
         Timer {
           '0': 
            { [Function: listOnTimeout]
              [length]: 0,
              [name]: 'listOnTimeout',
              [prototype]: listOnTimeout { [constructor]: [Circular] } },
           _list: [Circular] },
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 5055,
     parser: 
      HTTPParser {
        '0': 
         { [Function: parserOnHeaders]
           [length]: 2,
           [name]: 'parserOnHeaders',
           [prototype]: parserOnHeaders { [constructor]: [Circular] } },
        '1': 
         { [Function: parserOnHeadersComplete]
           [length]: 9,
           [name]: 'parserOnHeadersComplete',
           [prototype]: parserOnHeadersComplete { [constructor]: [Circular] } },
        '2': 
         { [Function: parserOnBody]
           [length]: 3,
           [name]: 'parserOnBody',
           [prototype]: parserOnBody { [constructor]: [Circular] } },
        '3': 
         { [Function: parserOnMessageComplete]
           [length]: 0,
           [name]: 'parserOnMessageComplete',
           [prototype]: parserOnMessageComplete { [constructor]: [Circular] } },
        '4': 
         { [Function: onParserExecute]
           [length]: 2,
           [name]: 'onParserExecute',
           [prototype]: onParserExecute { [constructor]: [Circular] } },
        _headers: [ [length]: 0 ],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Circular],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: 
         { [Function: parserOnIncoming]
           [length]: 2,
           [name]: 'parserOnIncoming',
           [prototype]: parserOnIncoming { [constructor]: [Circular] } } },
     on: 
      { [Function: socketOnWrap]
        [length]: 2,
        [name]: 'socketOnWrap',
        [prototype]: socketOnWrap { [constructor]: [Circular] } },
     _paused: false,
     read: 
      { [Function]
        [length]: 1,
        [name]: '',
        [prototype]: { [constructor]: [Circular] } },
     _consuming: true,
     _httpMessage: 
      ServerResponse {
        domain: null,
        _events: 
         { finish: 
            { [Function: resOnFinish]
              [length]: 0,
              [name]: 'resOnFinish',
              [prototype]: resOnFinish { [constructor]: [Circular] } } },
        _eventsCount: 1,
        _maxListeners: undefined,
        output: [ [length]: 0 ],
        outputEncodings: [ [length]: 0 ],
        outputCallbacks: [ [length]: 0 ],
        outputSize: 0,
        writable: true,
        _last: false,
        upgrading: false,
        chunkedEncoding: false,
        shouldKeepAlive: true,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedHeader: {},
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: [Circular],
        connection: [Circular],
        _header: null,
        _headers: null,
        _headerNames: {},
        _onPendingData: 
         { [Function: updateOutgoingData]
           [length]: 1,
           [name]: 'updateOutgoingData',
           [prototype]: updateOutgoingData { [constructor]: [Circular] } } },
     [Symbol(bytesRead)]: 0 },
  connection: 
   Socket {
     connecting: false,
     _hadError: false,
     _handle: 
      TCP {
        bytesRead: 242,
        _externalStream: {},
        fd: -1,
        reading: true,
        owner: [Circular],
        onread: 
         { [Function: onread]
           [length]: 2,
           [name]: 'onread',
           [prototype]: onread { [constructor]: [Circular] } },
        onconnection: null,
        writeQueueSize: 0,
        _consumed: true },
     _parent: null,
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        defaultEncoding: 'utf8',
        ranOut: false,
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _events: 
      { end: 
         [ { [Function: g]
             [length]: 0,
             [name]: 'g',
             [prototype]: g { [constructor]: [Circular] },
             listener: 
              { [Function: onend]
                [length]: 0,
                [name]: 'onend',
                [prototype]: onend { [constructor]: [Circular] } } },
           { [Function: socketOnEnd]
             [length]: 0,
             [name]: 'socketOnEnd',
             [prototype]: socketOnEnd { [constructor]: [Circular] } },
           [length]: 2 ],
        finish: 
         { [Function: onSocketFinish]
           [length]: 0,
           [name]: 'onSocketFinish',
           [prototype]: onSocketFinish { [constructor]: [Circular] } },
        _socketEnd: 
         { [Function: onSocketEnd]
           [length]: 0,
           [name]: 'onSocketEnd',
           [prototype]: onSocketEnd { [constructor]: [Circular] } },
        drain: 
         [ { [Function: ondrain]
             [length]: 0,
             [name]: 'ondrain',
             [prototype]: ondrain { [constructor]: [Circular] } },
           { [Function: socketOnDrain]
             [length]: 0,
             [name]: 'socketOnDrain',
             [prototype]: socketOnDrain { [constructor]: [Circular] } },
           [length]: 2 ],
        timeout: 
         { [Function]
           [length]: 0,
           [name]: '',
           [prototype]: { [constructor]: [Circular] } },
        error: 
         { [Function: socketOnError]
           [length]: 1,
           [name]: 'socketOnError',
           [prototype]: socketOnError { [constructor]: [Circular] } },
        close: 
         [ { [Function: serverSocketCloseListener]
             [length]: 0,
             [name]: 'serverSocketCloseListener',
             [prototype]: serverSocketCloseListener { [constructor]: [Circular] } },
           { [Function: onServerResponseClose]
             [length]: 0,
             [name]: 'onServerResponseClose',
             [prototype]: onServerResponseClose { [constructor]: [Circular] } },
           [length]: 2 ],
        data: 
         { [Function: socketOnData]
           [length]: 1,
           [name]: 'socketOnData',
           [prototype]: socketOnData { [constructor]: [Circular] } },
        resume: 
         { [Function: onSocketResume]
           [length]: 0,
           [name]: 'onSocketResume',
           [prototype]: onSocketResume { [constructor]: [Circular] } },
        pause: 
         { [Function: onSocketPause]
           [length]: 0,
           [name]: 'onSocketPause',
           [prototype]: onSocketPause { [constructor]: [Circular] } } },
     _eventsCount: 10,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: 
         { [Function]
           [length]: 1,
           [name]: '',
           [prototype]: { [constructor]: [Circular] } },
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: 
         CorkedRequest {
           next: null,
           entry: null,
           finish: { [Function] [length]: 1, [name]: '' } } },
     writable: true,
     allowHalfOpen: true,
     destroyed: false,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        domain: null,
        _events: 
         { connection: 
            { [Function: connectionListener]
              [length]: 1,
              [name]: 'connectionListener',
              [prototype]: connectionListener { [constructor]: [Circular] } },
           request: { [Function] [length]: 2, [name]: '' } },
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        [connections]: [Getter/Setter],
        _handle: 
         TCP {
           bytesRead: 0,
           _externalStream: {},
           fd: -1,
           reading: false,
           owner: [Circular],
           onread: null,
           onconnection: 
            { [Function: onconnection]
              [length]: 2,
              [name]: 'onconnection',
              [prototype]: onconnection { [constructor]: [Circular] } },
           writeQueueSize: 0 },
        _usingSlaves: false,
        _slaves: [ [length]: 0 ],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        _pendingResponseData: 0,
        _connectionKey: '6::::5000' },
     _server: 
      Server {
        domain: null,
        _events: 
         { connection: 
            { [Function: connectionListener]
              [length]: 1,
              [name]: 'connectionListener',
              [prototype]: connectionListener { [constructor]: [Circular] } },
           request: { [Function] [length]: 2, [name]: '' } },
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        [connections]: [Getter/Setter],
        _handle: 
         TCP {
           bytesRead: 0,
           _externalStream: {},
           fd: -1,
           reading: false,
           owner: [Circular],
           onread: null,
           onconnection: 
            { [Function: onconnection]
              [length]: 2,
              [name]: 'onconnection',
              [prototype]: onconnection { [constructor]: [Circular] } },
           writeQueueSize: 0 },
        _usingSlaves: false,
        _slaves: [ [length]: 0 ],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        _pendingResponseData: 0,
        _connectionKey: '6::::5000' },
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: 
         Timer {
           '0': 
            { [Function: listOnTimeout]
              [length]: 0,
              [name]: 'listOnTimeout',
              [prototype]: listOnTimeout { [constructor]: [Circular] } },
           _list: [Circular] },
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: 
         Timer {
           '0': 
            { [Function: listOnTimeout]
              [length]: 0,
              [name]: 'listOnTimeout',
              [prototype]: listOnTimeout { [constructor]: [Circular] } },
           _list: [Circular] },
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 5055,
     parser: 
      HTTPParser {
        '0': 
         { [Function: parserOnHeaders]
           [length]: 2,
           [name]: 'parserOnHeaders',
           [prototype]: parserOnHeaders { [constructor]: [Circular] } },
        '1': 
         { [Function: parserOnHeadersComplete]
           [length]: 9,
           [name]: 'parserOnHeadersComplete',
           [prototype]: parserOnHeadersComplete { [constructor]: [Circular] } },
        '2': 
         { [Function: parserOnBody]
           [length]: 3,
           [name]: 'parserOnBody',
           [prototype]: parserOnBody { [constructor]: [Circular] } },
        '3': 
         { [Function: parserOnMessageComplete]
           [length]: 0,
           [name]: 'parserOnMessageComplete',
           [prototype]: parserOnMessageComplete { [constructor]: [Circular] } },
        '4': 
         { [Function: onParserExecute]
           [length]: 2,
           [name]: 'onParserExecute',
           [prototype]: onParserExecute { [constructor]: [Circular] } },
        _headers: [ [length]: 0 ],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Circular],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: 
         { [Function: parserOnIncoming]
           [length]: 2,
           [name]: 'parserOnIncoming',
           [prototype]: parserOnIncoming { [constructor]: [Circular] } } },
     on: 
      { [Function: socketOnWrap]
        [length]: 2,
        [name]: 'socketOnWrap',
        [prototype]: socketOnWrap { [constructor]: [Circular] } },
     _paused: false,
     read: 
      { [Function]
        [length]: 1,
        [name]: '',
        [prototype]: { [constructor]: [Circular] } },
     _consuming: true,
     _httpMessage: 
      ServerResponse {
        domain: null,
        _events: 
         { finish: 
            { [Function: resOnFinish]
              [length]: 0,
              [name]: 'resOnFinish',
              [prototype]: resOnFinish { [constructor]: [Circular] } } },
        _eventsCount: 1,
        _maxListeners: undefined,
        output: [ [length]: 0 ],
        outputEncodings: [ [length]: 0 ],
        outputCallbacks: [ [length]: 0 ],
        outputSize: 0,
        writable: true,
        _last: false,
        upgrading: false,
        chunkedEncoding: false,
        shouldKeepAlive: true,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedHeader: {},
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: [Circular],
        connection: [Circular],
        _header: null,
        _headers: null,
        _headerNames: {},
        _onPendingData: 
         { [Function: updateOutgoingData]
           [length]: 1,
           [name]: 'updateOutgoingData',
           [prototype]: updateOutgoingData { [constructor]: [Circular] } } },
     [Symbol(bytesRead)]: 0 },
  httpVersionMajor: 1,
  httpVersionMinor: 1,
  httpVersion: '1.1',
  complete: false,
  headers: 
   { host: 'localhost:5000',
     'content-length': '96',
     'content-type': 'application/json',
     cookie: 'JSESSIONID=659FF2CD85D25511AA98A2DFFE5D0D1D' },
  rawHeaders: 
   [ 'HOST',
     'localhost:5000',
     'content-length',
     '96',
     'content-type',
     'application/json',
     'cookie',
     'JSESSIONID=659FF2CD85D25511AA98A2DFFE5D0D1D',
     [length]: 8 ],
  trailers: {},
  rawTrailers: [ [length]: 0 ],
  upgrade: false,
  url: '/',
  method: 'POST',
  statusCode: null,
  statusMessage: null,
  client: 
   Socket {
     connecting: false,
     _hadError: false,
     _handle: 
      TCP {
        bytesRead: 242,
        _externalStream: {},
        fd: -1,
        reading: true,
        owner: [Circular],
        onread: 
         { [Function: onread]
           [length]: 2,
           [name]: 'onread',
           [prototype]: onread { [constructor]: [Circular] } },
        onconnection: null,
        writeQueueSize: 0,
        _consumed: true },
     _parent: null,
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        defaultEncoding: 'utf8',
        ranOut: false,
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _events: 
      { end: 
         [ { [Function: g]
             [length]: 0,
             [name]: 'g',
             [prototype]: g { [constructor]: [Circular] },
             listener: 
              { [Function: onend]
                [length]: 0,
                [name]: 'onend',
                [prototype]: onend { [constructor]: [Circular] } } },
           { [Function: socketOnEnd]
             [length]: 0,
             [name]: 'socketOnEnd',
             [prototype]: socketOnEnd { [constructor]: [Circular] } },
           [length]: 2 ],
        finish: 
         { [Function: onSocketFinish]
           [length]: 0,
           [name]: 'onSocketFinish',
           [prototype]: onSocketFinish { [constructor]: [Circular] } },
        _socketEnd: 
         { [Function: onSocketEnd]
           [length]: 0,
           [name]: 'onSocketEnd',
           [prototype]: onSocketEnd { [constructor]: [Circular] } },
        drain: 
         [ { [Function: ondrain]
             [length]: 0,
             [name]: 'ondrain',
             [prototype]: ondrain { [constructor]: [Circular] } },
           { [Function: socketOnDrain]
             [length]: 0,
             [name]: 'socketOnDrain',
             [prototype]: socketOnDrain { [constructor]: [Circular] } },
           [length]: 2 ],
        timeout: 
         { [Function]
           [length]: 0,
           [name]: '',
           [prototype]: { [constructor]: [Circular] } },
        error: 
         { [Function: socketOnError]
           [length]: 1,
           [name]: 'socketOnError',
           [prototype]: socketOnError { [constructor]: [Circular] } },
        close: 
         [ { [Function: serverSocketCloseListener]
             [length]: 0,
             [name]: 'serverSocketCloseListener',
             [prototype]: serverSocketCloseListener { [constructor]: [Circular] } },
           { [Function: onServerResponseClose]
             [length]: 0,
             [name]: 'onServerResponseClose',
             [prototype]: onServerResponseClose { [constructor]: [Circular] } },
           [length]: 2 ],
        data: 
         { [Function: socketOnData]
           [length]: 1,
           [name]: 'socketOnData',
           [prototype]: socketOnData { [constructor]: [Circular] } },
        resume: 
         { [Function: onSocketResume]
           [length]: 0,
           [name]: 'onSocketResume',
           [prototype]: onSocketResume { [constructor]: [Circular] } },
        pause: 
         { [Function: onSocketPause]
           [length]: 0,
           [name]: 'onSocketPause',
           [prototype]: onSocketPause { [constructor]: [Circular] } } },
     _eventsCount: 10,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: 
         { [Function]
           [length]: 1,
           [name]: '',
           [prototype]: { [constructor]: [Circular] } },
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: 
         CorkedRequest {
           next: null,
           entry: null,
           finish: { [Function] [length]: 1, [name]: '' } } },
     writable: true,
     allowHalfOpen: true,
     destroyed: false,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        domain: null,
        _events: 
         { connection: 
            { [Function: connectionListener]
              [length]: 1,
              [name]: 'connectionListener',
              [prototype]: connectionListener { [constructor]: [Circular] } },
           request: { [Function] [length]: 2, [name]: '' } },
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        [connections]: [Getter/Setter],
        _handle: 
         TCP {
           bytesRead: 0,
           _externalStream: {},
           fd: -1,
           reading: false,
           owner: [Circular],
           onread: null,
           onconnection: 
            { [Function: onconnection]
              [length]: 2,
              [name]: 'onconnection',
              [prototype]: onconnection { [constructor]: [Circular] } },
           writeQueueSize: 0 },
        _usingSlaves: false,
        _slaves: [ [length]: 0 ],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        _pendingResponseData: 0,
        _connectionKey: '6::::5000' },
     _server: 
      Server {
        domain: null,
        _events: 
         { connection: 
            { [Function: connectionListener]
              [length]: 1,
              [name]: 'connectionListener',
              [prototype]: connectionListener { [constructor]: [Circular] } },
           request: { [Function] [length]: 2, [name]: '' } },
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        [connections]: [Getter/Setter],
        _handle: 
         TCP {
           bytesRead: 0,
           _externalStream: {},
           fd: -1,
           reading: false,
           owner: [Circular],
           onread: null,
           onconnection: 
            { [Function: onconnection]
              [length]: 2,
              [name]: 'onconnection',
              [prototype]: onconnection { [constructor]: [Circular] } },
           writeQueueSize: 0 },
        _usingSlaves: false,
        _slaves: [ [length]: 0 ],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        _pendingResponseData: 0,
        _connectionKey: '6::::5000' },
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: 
         Timer {
           '0': 
            { [Function: listOnTimeout]
              [length]: 0,
              [name]: 'listOnTimeout',
              [prototype]: listOnTimeout { [constructor]: [Circular] } },
           _list: [Circular] },
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: 
         Timer {
           '0': 
            { [Function: listOnTimeout]
              [length]: 0,
              [name]: 'listOnTimeout',
              [prototype]: listOnTimeout { [constructor]: [Circular] } },
           _list: [Circular] },
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 5055,
     parser: 
      HTTPParser {
        '0': 
         { [Function: parserOnHeaders]
           [length]: 2,
           [name]: 'parserOnHeaders',
           [prototype]: parserOnHeaders { [constructor]: [Circular] } },
        '1': 
         { [Function: parserOnHeadersComplete]
           [length]: 9,
           [name]: 'parserOnHeadersComplete',
           [prototype]: parserOnHeadersComplete { [constructor]: [Circular] } },
        '2': 
         { [Function: parserOnBody]
           [length]: 3,
           [name]: 'parserOnBody',
           [prototype]: parserOnBody { [constructor]: [Circular] } },
        '3': 
         { [Function: parserOnMessageComplete]
           [length]: 0,
           [name]: 'parserOnMessageComplete',
           [prototype]: parserOnMessageComplete { [constructor]: [Circular] } },
        '4': 
         { [Function: onParserExecute]
           [length]: 2,
           [name]: 'onParserExecute',
           [prototype]: onParserExecute { [constructor]: [Circular] } },
        _headers: [ [length]: 0 ],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Circular],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: 
         { [Function: parserOnIncoming]
           [length]: 2,
           [name]: 'parserOnIncoming',
           [prototype]: parserOnIncoming { [constructor]: [Circular] } } },
     on: 
      { [Function: socketOnWrap]
        [length]: 2,
        [name]: 'socketOnWrap',
        [prototype]: socketOnWrap { [constructor]: [Circular] } },
     _paused: false,
     read: 
      { [Function]
        [length]: 1,
        [name]: '',
        [prototype]: { [constructor]: [Circular] } },
     _consuming: true,
     _httpMessage: 
      ServerResponse {
        domain: null,
        _events: 
         { finish: 
            { [Function: resOnFinish]
              [length]: 0,
              [name]: 'resOnFinish',
              [prototype]: resOnFinish { [constructor]: [Circular] } } },
        _eventsCount: 1,
        _maxListeners: undefined,
        output: [ [length]: 0 ],
        outputEncodings: [ [length]: 0 ],
        outputCallbacks: [ [length]: 0 ],
        outputSize: 0,
        writable: true,
        _last: false,
        upgrading: false,
        chunkedEncoding: false,
        shouldKeepAlive: true,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedHeader: {},
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: [Circular],
        connection: [Circular],
        _header: null,
        _headers: null,
        _headerNames: {},
        _onPendingData: 
         { [Function: updateOutgoingData]
           [length]: 1,
           [name]: 'updateOutgoingData',
           [prototype]: updateOutgoingData { [constructor]: [Circular] } } },
     [Symbol(bytesRead)]: 0 },
  _consuming: false,
  _dumped: false }